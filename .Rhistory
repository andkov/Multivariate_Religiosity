source(pathReadClean)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
# update.packages("ask=F")
require(colorspace)
require(lme4)
require(Matrix)
require(lattice)
require(car)
require(MASS)
require(nnet)
require(ggplot2)
require(plyr)
require(reshape2)
require(colorspace)
#######
# NOTE: you must have  "NLSY-97_Religiosity" repository in your local GitHub folder
# in order to execute (1) and (2)
pathGitHub <- file.path("C:/Users/inspirion/Documents/GitHub") # locate the "GitHub" folder on your computer
#######
# (1) requires "NLSY-97_Religiosity" repository
# Read the source file from NLS Web Investigator and prepare the parent dataset "dsSource"
######## Chose how the categories are defined in terms of the original scale.
#### GIA332 - create variable to record a summarized category of attendance
Goers<-c(8,7,6)
Irregulars<-c(5,4,3)
Absentees<-c(2,1)
#### GIA431 - create variable to record a summarized category of attendance
# Goers<-c(8,7,6,5)
# Irregulars<-c(4,3,2)
# Absentees<-c(1)
source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R")
source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R"))
source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R"))
pathGitHub
pathReadClean <- file.path(pathGitHub, paste0("NLSY-97_Religiosity/01_reading_and_cleaning.R"))
# C:/Users/USERNAME/Documents/GitHub  /Repository        /NN_Script.R
source(pathReadClean)
pathGitHub
pathReadClean
pathGitHub
pathGitHub <- file.path("C:/Users/inspirion/Documents/GitHub") # locate the "GitHub" folder on your computer
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
# update.packages("ask=F")
require(colorspace)
require(lme4)
require(Matrix)
require(lattice)
require(car)
require(MASS)
require(nnet)
require(ggplot2)
require(plyr)
require(reshape2)
require(colorspace)
#######
# NOTE: you must have  "NLSY-97_Religiosity" repository in your local GitHub folder
# in order to execute (1) and (2)
pathGitHub <- file.path("C:/Users/inspirion/Documents/GitHub") # locate the "GitHub" folder on your computer
#######
# (1) requires "NLSY-97_Religiosity" repository
# Read the source file from NLS Web Investigator and prepare the parent dataset "dsSource"
######## Chose how the categories are defined in terms of the original scale.
#### GIA332 - create variable to record a summarized category of attendance
Goers<-c(8,7,6)
Irregulars<-c(5,4,3)
Absentees<-c(2,1)
#### GIA431 - create variable to record a summarized category of attendance
# Goers<-c(8,7,6,5)
# Irregulars<-c(4,3,2)
# Absentees<-c(1)
# source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R"))
pathReadClean <- file.path(pathGitHub, paste0("NLSY-97_Religiosity/01_reading_and_cleaning.R"))
# C:/Users/USERNAME/Documents/GitHub  /Repository        /NN_Script.R
source(pathReadClean)
rm(list=setdiff(ls(),(c("pathGitHub","dsSource")))) # Clean temp elements
View(dsSource)
colname(dsSource)
colnames(dsSource)
manifestvars<-c("id", "sex", "race",
"byear","bmonth",
"agemon_2002", "agemon_2005", "agemon_2008",
"ageyear_2002","ageyear_2005","ageyear_2005",
"relpref_2005","relpref_2008"
"decide_2002","decide_2005","decide_2008",
"obey_2002","obey_2005","obey_2008",
"pray_2002","pray_2005","pray_2008",
"todo_2002","todo_2005","todo_2008",
"value_2002","value_2005","value_2008",
"attend_2000","attend_2001","attend_2002",
"attend_2003","attend_2004","attend_2005",
"attend_2006","attend_2007","attend_2008",
"attend_2009","attend_2010")
manifestvars<-c("id", "sex", "race",
"byear","bmonth",
"agemon_2002", "agemon_2005", "agemon_2008",
"ageyear_2002","ageyear_2005","ageyear_2005",
"relpref_2005","relpref_2008",
"decide_2002","decide_2005","decide_2008",
"obey_2002","obey_2005","obey_2008",
"pray_2002","pray_2005","pray_2008",
"todo_2002","todo_2005","todo_2008",
"value_2002","value_2005","value_2008",
"attend_2000","attend_2001","attend_2002",
"attend_2003","attend_2004","attend_2005",
"attend_2006","attend_2007","attend_2008",
"attend_2009","attend_2010")
data<-dsSource[manifestvars]
data<-dsSource[,manifestvars]
manifestvars
colnames(dsSource)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
# update.packages("ask=F")
require(colorspace)
require(lme4)
require(Matrix)
require(lattice)
require(car)
require(MASS)
require(nnet)
require(ggplot2)
require(plyr)
require(reshape2)
require(colorspace)
#######
# NOTE: you must have  "NLSY-97_Religiosity" repository in your local GitHub folder
# in order to execute (1) and (2)
pathGitHub <- file.path("C:/Users/inspirion/Documents/GitHub") # locate the "GitHub" folder on your computer
#######
# (1) requires "NLSY-97_Religiosity" repository
# Read the source file from NLS Web Investigator and prepare the parent dataset "dsSource"
######## Chose how the categories are defined in terms of the original scale.
#### GIA332 - create variable to record a summarized category of attendance
Goers<-c(8,7,6)
Irregulars<-c(5,4,3)
Absentees<-c(2,1)
#### GIA431 - create variable to record a summarized category of attendance
# Goers<-c(8,7,6,5)
# Irregulars<-c(4,3,2)
# Absentees<-c(1)
# source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R"))
pathReadClean <- file.path(pathGitHub, paste0("NLSY-97_Religiosity/01_reading_and_cleaning.R"))
# C:/Users/USERNAME/Documents/GitHub  /Repository        /NN_Script.R
source(pathReadClean)
rm(list=setdiff(ls(),(c("pathGitHub","dsSource")))) # Clean temp elements
# Select variabes for factor analysis
colnames(dsSource)
manifestvars<-c("id", "sex", "race",
"byear","bmonth",
"agemon_2002", "agemon_2005", "agemon_2008",
"ageyear_2002","ageyear_2005","ageyear_2005",
"relpref_2005","relpref_2008",
"decide_2002","decide_2005","decide_2008",
"obey_2002","obey_2005","obey_2008",
"pray_2002","pray_2005","pray_2008",
"todo_2002","todo_2005","todo_2008",
"values_2002","values_2005","values_2008",
"attend_2000","attend_2001","attend_2002",
"attend_2003","attend_2004","attend_2005",
"attend_2006","attend_2007","attend_2008",
"attend_2009","attend_2010")
data<-dsSource[manifestvars]
View(data)
source("datasets.R")
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
source("datasets.R")
colnames(dsSource)
ds2002<-data[c("attend_2002","decide_2002","obey_2002","todo_2002",
"pray_2002","values_2002")]
keepvars<-c("attend_2002","decide_2002","obey_2002","todo_2002",
"pray_2002","values_2002")
keepvars
ds2002<-data[keepvars]
ds2002<-dsSource[keepvars]
A<-ds2002
R<-cor(A)
R<-cor(A)
corplot(R)
require(corplot)
require(corgram)
require(corrgram)
corplot(R)
corrplot(R)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
source("datasets.R")
R<-cor(A)
corrplot(R)
source("datasets.R")
R<-cor(A)
corrplot(R)
library(corrgram)
install.packages("corrgram")
R<-cor(A)
corrplot(R)
?corrgram
??corrgram
library(corrplot)
install.packages("corrplot")
source("datasets.R")
R<-cor(A)
corrplot(R)
library(corrplot)
View(R)
A<-ds2002
R<-cor(A)
View(R)
View(A)
mtcar
print(mtcar)
print(mtcars)
mcor<-cor(mtcars)
mcor
corrplot(R)
corrplot(mcor)
mean(colnames) # returns NA
m<-mean(colnames) # returns NA
dim(dsSourse)
dim(dsSource)
na.omit(dsSource)
dim(dsSource)
source("datasets.R")
R<-cor(A)
View(R)
R<-cov(A)
R
source("datasets.R")
R<-cov(A)
R
str(A)
source("datasets.R")
str(A)
View(A)
A<-na.omit(A)
R<-cov(A)
R
dsSource<-na.omit(dsSource)
dim(dsSource)
source("datasets.R")
str(A)
A<-na.omit(A)
R<-cor(A)
R
corrplot(R)
corrgram(R)
summary(A)
svdA<-svd(A)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U
svdA<-svd(R)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U
R
R
svdA<-svd(R)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
Us %*% diag(Ds) %*% t(Vs) # reconstruction A with UDV' decomposition
U %*% diag(D) %*% t(V) # reconstruction A with UDV' decomposition
V%*%sympow(D,-1/2)
source("datasets.R")
str(A)
A<-na.omit(A)
R<-cor(A)
R
corrplot(R)
corrgram(R)
summary(A)
R
svdA<-svd(R)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U %*% diag(D) %*% t(V) # reconstruction A with UDV' decomposition
V%*%sympow(D,-1/2)
V%*%sympower(D,-1/2)
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source("datasets.R")
str(A)
A<-na.omit(A)
R<-cor(A)
R
corrplot(R)
corrgram(R)
library(corrgram)
library(corrplot)
corrplot(R)
corrgram(R)
summary(A)
R
svdA<-svd(R)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U %*% diag(D) %*% t(V) # reconstruction A with UDV' decomposition
V%*%sympower(D,-1/2)
file.path(getwd(),"functions","Steiger R library functions.txt")
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
V%*%sympower(D,-1/2)
R
svdA<-svd(R)
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v
D
V%*% sympower(diag(D),-1/2)
F<-V%*% sympower(diag(D),-1/2)
F<-V%*% sympower(diag(D),-1/2)
R
F%*%t(F)
F<-V%*% sympower(diag(D),-1/2)
R
F%*%t(F)
cov(D)
cov(A)
F%*%t(F)
U %*% diag(D) %*% t(V) # reconstruction A with UDV' decomposition
R
F<-V%*% sympower(diag(D),-1/2)
R
F%*%t(F)
F<-U%*% sympower(diag(D),-1/2)
R
F%*%t(F)
F<-U%*% sympower(diag(D),1/2)
R
F%*%t(F)
Scree.Plot(R,main="Scree of ds2002")
Scree.Plot(R,main="Scree of ds2002")
Scree.Plot(R,main="Scree of ds2002")
MLFA(R)
crow(A)
nrow(A)
FA.Stats(R,n.factors=1:3,n.obs=nrow(A), RMSEA.cutoff=.05)
FA.Stats(R,n.factors=1:2,n.obs=nrow(A), RMSEA.cutoff=.05)
FA.Stats(R,n.factors=1:2,n.obs=nrow(A), RMSEA.cutoff=.05)
FA.Stats(R,n.factors=1:3,n.obs=nrow(A), RMSEA.cutoff=.5)
library(psych)
fit.1<-principal(R,nfactors=1,n.obs=nrow(A),rotate="none")
print(fit.1)
rot<-rotation['1']
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster","quartimin")
rot<-rotation['1']
rot
rot<-rotation[1]
rot
print(fit.1)
fit.2<-principal(R,nfactors=2,n.obs=nrow(A),rotate="none")
print(fit.2)
fit.2.varimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="varimax")
print(fit.2.varimax)
fit.2.promax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="promax")
print(fit.2.promax)
(fit.2.quatimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="quatimax"))
(fit.2.oblimin<-principal(R,nfactors=2,n.obs=nrow(A),rotate="oblimin"))
(fit.2.simplimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="simplimax"))
(fit.2.cluster<-principal(R,nfactors=2,n.obs=nrow(A),rotate="cluster"))
(fit.3<-principal(R,nfactors=3,n.obs=nrow(A),rotate="none"))
(fit.3.varimax<-principal(R,nfactors=3,n.obs=nrow(A),rotate="varimax"))
(fit.3.promax<-principal(R,nfactors=3,n.obs=nrow(A),rotate="promax"))
(fit.3.quatimax<-principal(R,nfactors=3,n.obs=nrow(A),rotate="quatimax"))
(fit.3.oblimin<-principal(R,nfactors=3,n.obs=nrow(A),rotate="oblimin"))
(fit.3.simplimax<-principal(R,nfactors=3,n.obs=nrow(A),rotate="simplimax"))
(fit.3.cluster<-principal(R,nfactors=3,n.obs=nrow(A),rotate="cluster"))
(fit.3<-principal(R,nfactors=3,n.obs=nrow(A),rotate="none"))
(fit.3.varimax<-principal(R,nfactors=3,n.obs=nrow(A),rotate="varimax"))
Scree.Plot(R,main="Scree of ds2002")
source("datasets.R")
str(A)
A<-na.omit(A)
R<-cor(A)
R # correlation matrix
corrplot(R)
corrgram(R)
summary(A)
R
svdA<-svd(R) # Single Value Decomposition
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U %*% diag(D) %*% t(V) # reconstruction R with UDV' decomposition
R
F<-U%*% sympower(diag(D),1/2) # Gram-factor of F, FF'=R
R
F%*%t(F)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
# update.packages("ask=F")
require(colorspace)
require(lme4)
require(Matrix)
require(lattice)
require(car)
require(MASS)
require(nnet)
require(ggplot2)
require(plyr)
require(reshape2)
require(colorspace)
library(corrgram)
library(corrplot)
library(psych)
# Load custom functions
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
#######
# NOTE: you must have  "NLSY-97_Religiosity" repository in your local GitHub folder
# in order to execute (1) and (2)
pathGitHub <- file.path("C:/Users/inspirion/Documents/GitHub") # locate the "GitHub" folder on your computer
#######
# (1) requires "NLSY-97_Religiosity" repository
# Read the source file from NLS Web Investigator and prepare the parent dataset "dsSource"
######## Chose how the categories are defined in terms of the original scale.
#### GIA332 - create variable to record a summarized category of attendance
Goers<-c(8,7,6)
Irregulars<-c(5,4,3)
Absentees<-c(2,1)
#### GIA431 - create variable to record a summarized category of attendance
# Goers<-c(8,7,6,5)
# Irregulars<-c(4,3,2)
# Absentees<-c(1)
# source(file.path("C:/Users/inspirion/Documents/GitHub/NLSY-97_Religiosity/01_reading_and_cleaning.R"))
pathReadClean <- file.path(pathGitHub, paste0("NLSY-97_Religiosity/01_reading_and_cleaning.R"))
# C:/Users/USERNAME/Documents/GitHub  /Repository        /NN_Script.R
source(pathReadClean)
rm(list=setdiff(ls(),(c("pathGitHub","dsSource")))) # Clean temp elements
# Select variabes for factor analysis
colnames(dsSource)
dsSource<-na.omit(dsSource)
manifestvars<-c("id", "sex", "race",
"byear","bmonth",
"agemon_2002", "agemon_2005", "agemon_2008",
"ageyear_2002","ageyear_2005","ageyear_2005",
"relpref_2005","relpref_2008",
"decide_2002","decide_2005","decide_2008",
"obey_2002","obey_2005","obey_2008",
"pray_2002","pray_2005","pray_2008",
"todo_2002","todo_2005","todo_2008",
"values_2002","values_2005","values_2008",
"attend_2000","attend_2001","attend_2002",
"attend_2003","attend_2004","attend_2005",
"attend_2006","attend_2007","attend_2008",
"attend_2009","attend_2010")
keepvars<-c("decide_2002","obey_2002","todo_2002",
"pray_2002","values_2002")
ds2002<-dsSource[keepvars]
ds2002<-dsSource[keepvars]
A<-ds2002
str(A)
A<-na.omit(A)
R<-cor(A)
R # correlation matrix
corrplot(R)
corrgram(R)
R<-cor(A,method="kendal")
R<-cor(A,method="kendal")
R # correlation matrix
corrplot(R)
corrgram(R)
summary(A)
R
svdA<-svd(R) # Single Value Decomposition
U<-svdA$u                # U
D<-svdA$d                # D
V<-svdA$v                # V
U %*% diag(D) %*% t(V) # reconstruction R with UDV' decomposition
D
V
U %*% diag(D) %*% t(V) # reconstruction R with UDV' decomposition
R
F<-U%*% sympower(diag(D),1/2) # Gram-factor of F, FF'=R
F<-U%*% sympower(diag(D),1/2) # Gram-factor of F, FF'=R
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
F<-U%*% sympower(diag(D),1/2) # Gram-factor of F, FF'=R
R
F%*%t(F)
R
F%*%t(F)
Scree.Plot(R,main="Scree of ds2002")
source(file.path(getwd(),"functions","Steiger R library functions.txt"))
source(file.path(getwd(),"functions","AdvancedFactorFunctions.txt"))
source(file.path(getwd(),"functions","fa.promax.R"))
Scree.Plot(R,main="Scree of ds2002")
FA.Stats(R,n.factors=1:2,n.obs=nrow(A), RMSEA.cutoff=.05)
# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]       [8]
rotation<-c("none","varimax","quatimax","promax","oblimin","simplimax","cluster","quartimin")
rot<-rotation[1]
(fit.1<-principal(R,nfactors=1,n.obs=nrow(A),rotate="none"))
(fit.1<-principal(R,nfactors=1,n.obs=nrow(A),rotate="none"))
(fit.1<-principal(R,nfactors=1,n.obs=nrow(A),rotate="none"))
(fit.2<-principal(R,nfactors=2,n.obs=nrow(A),rotate="none"))
(fit.2.varimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="varimax"))
(fit.2.promax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="promax"))
(fit.2.quatimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="quatimax"))
(fit.2.oblimin<-principal(R,nfactors=2,n.obs=nrow(A),rotate="oblimin"))
(fit.2.simplimax<-principal(R,nfactors=2,n.obs=nrow(A),rotate="simplimax"))
(fit.2.cluster<-principal(R,nfactors=2,n.obs=nrow(A),rotate="cluster"))
install.packages(sweave)
install.packages("sweave")
install.packages("knitr")
install.packages("memoir")
install.packages("MiKTeX")
install.packages("MiKTeX")
install.packages("sweave")
install.packages("knitr")
install.packages("memoir")
install.packages("MiKTeX")
